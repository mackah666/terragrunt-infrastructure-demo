name: Prod Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  configure_aws:
    runs-on: ubuntu-latest
    env:
      # AWS_DEFAULT_REGION: us-east-1
      TF_VAR_master_password: ${{ secrets.TF_VAR_master_password }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    permissions:
      id-token: write
      contents: write
    # Runs a set of commands using the runners shell
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with: 
          fetch-depth: 0
          persist-credentials: true # <--- this

      - run: sleep 5 # there's still a race condition for now

      - name: Configure AWS
        run: |
          export AWS_ROLE_ARN=arn:aws:iam::733041935482:role/GithubAWSTerraformRole
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=us-east-1
          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo GITHUB_TOKEN=$GITHUB_TOKEN >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
          aws sts assume-role-with-web-identity --role-arn $AWS_ROLE_ARN --role-session-name mh9test --web-identity-token file://$AWS_WEB_IDENTITY_TOKEN_FILE --duration-seconds 3000 > /tmp/irp-cred.txt
          export AWS_ACCESS_KEY_ID="$(cat /tmp/irp-cred.txt | jq -r ".Credentials.AccessKeyId")" >> $GITHUB_ENV
          export AWS_SECRET_ACCESS_KEY="$(cat /tmp/irp-cred.txt | jq -r ".Credentials.SecretAccessKey")" >> $GITHUB_ENV
          export AWS_SESSION_TOKEN="$(cat /tmp/irp-cred.txt | jq -r ".Credentials.SessionToken")" >> $GITHUB_ENV
          # This a test for the secrets manager and retrieving the ssh private, need to move out of the github secrets
          aws secretsmanager get-secret-value --secret-id prod/github_key_test --query SecretString --output text --region us-east-2 >> secrets.txt 
          cat secrets.txt


  install_tooling:
      needs: configure_aws
      runs-on: ubuntu-latest
      env:
        # AWS_DEFAULT_REGION: us-east-1
        TF_VAR_master_password: ${{ secrets.TF_VAR_master_password }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      permissions:
        id-token: write
        contents: write
      # Runs a set of commands using the runners shell
      steps:
        - name: checkout
          uses: actions/checkout@v2
          with: 
            fetch-depth: 0
            persist-credentials: true # <--- this

        - run: sleep 5 # there's still a race condition for now

        - name: Setup infracost creds
          run: |
            mkdir ~/.config/infracost
            echo "${{ secrets.INFRACOST_CREDS }}" > ~/.config/infracost/credentials.yml
            chmod 600 ~/.config/infracost/credentials.yml

        # This is required as this infrastructure uses shared terraform modules from another repository
        - name: Setup infra modules deploy key
          run: |
            mkdir ~/.ssh
            echo "${{ secrets.ssh_key_shared_modules }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -t rsa github.com
       
          
        - name: Install Terraform
          uses: little-core-labs/install-terraform@v2.0.0
          with:
              version: 1.0.5
            
        - name: Setup Terragrunt
          uses: autero1/action-terragrunt@v1.1.0
          with:
            terragrunt_version: latest
  
  # install_tools:
  #   runs-on: ubuntu-latest
  #   needs: configure_aws
      # - name: Setup infracost creds
      #   run: |
      #     mkdir ~/.config/infracost
      #     echo "${{ secrets.INFRACOST_CREDS }}" > ~/.config/infracost/credentials.yml
      #     chmod 600 ~/.config/infracost/credentials.yml

      # # This is required as this infrastructure uses shared terraform modules from another repository
      # - name: Setup infra modules deploy key
      #   run: |
      #     mkdir ~/.ssh
      #     echo "${{ secrets.ssh_key_shared_modules }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh-keyscan -t rsa github.com
       
          
      # - name: Install Terraform
      #   uses: little-core-labs/install-terraform@v2.0.0
      #   with:
      #       version: 1.0.5
          
      # - name: Setup Terragrunt
      #   uses: autero1/action-terragrunt@v1.1.0
      #   with:
      #     terragrunt_version: latest
        
  #     - name: Plan Terragrunt
  #       working-directory: prod/us-east-1/prod
  #       run: terragrunt run-all plan

  #     - name: Run Infracost
  #       working-directory: prod/us-east-1/prod
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         # Downloads the CLI based on your OS/arch and puts it in /usr/local/bin
  #         curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
  #         ./calculate_costs.sh
        
        
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '14.17.5'
  #     - name: Install dependencies
  #       working-directory: 
  #       run: npm ci
  #     - name: Create Semantic Release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: npx semantic-release

  #     # This will nofity teams
  #     - name: Notify Teams
  #       run: |
  #         ./teams_update.sh
